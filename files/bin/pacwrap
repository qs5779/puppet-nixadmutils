#!/usr/bin/env python
# -*- Mode: Python; tab-width: 2; indent-tabs-mode: nil -*-

import sys
import os.path
import pkgmgrs
import distro
from optparse import OptionParser
from packaging import version

def main():
  usage = """usage: %prog [options] action

  Actions:
    pacwrap file FILE          # Displays package if any that include the FILE
    pacwrap find PACKAGE       # Searches repositories for PACKAGE
    pacwrap help [COMMAND]     # Describe available commands or one specific command
    pacwrap info PACKAGE       # Display information about PACKAGE
    pacwrap install PACKAGE    # Installs PACKAGE
    pacwrap list [PACKAGE]     # Lists files in PACKAGE or installed packages when no PACKAGE specified.
    pacwrap uninstall PACKAGE  # Unistalls PACKAGE
  """
  parser = OptionParser(usage)
  parser.add_option("-d", "--debug", action="count", dest="debug", default=0, help='increment debug level')
  parser.add_option("-t", "--test", action="store_true", dest="test", default=False, help='specify test mode')
  parser.add_option("-v", "--verbose", action="count", dest="verbose", default=0, help='increment verbosity level')
  parser.add_option("-V", "--version", action="store_true", dest="version", default=False, help='show version and exit')


  parser.add_option("-s", "--script", action="store", dest="caller", default='wtflogger', help='specify caller name (defaults to wtfalert)')

  (opts, args) = parser.parse_args()

  options = vars(opts)
  if options['debug']>1:
    print (options)
    print (args)

  if options['version']:
    basenm = os.path.basename(sys.argv[0])
    print('%s Version: 1.0.0' % basenm)
    exit(0)

  args_nbr = len(args)
  if args_nbr < 1:
    print('ParameterError: Missing parameter.', file=sys.stderr)
    parser.print_help()
    exit(1)

  oslike = distro.like()

  if oslike == 'arch':
    handler = pkgmgrs.PacmanHandler(options)
  elif oslike == 'debian':
    handler = pkgmgrs.AptHandler(options)
  elif re.search('rhel', oslike):
    # should probably check for older fedora
    if version.parse(distro.version()) < version.parse('8'):
      handler = pkgmgrs.YumHandler(options)
    else:
      handler = pkgmgrs.DnfHandler(options)
  else:
    print('Unsupported distro like => ' + oslike, file=sys.stderr)
    exit(1)

  try:
    exit(handler.action(args.pop(0), args))
  except pkgmgrs.UsageError as ex:
    print('UsageErrror: %s!!!' % ex.message, file=sys.stderr)
    parser.print_help()
    exit(1)

if __name__ == "__main__":
    main()
