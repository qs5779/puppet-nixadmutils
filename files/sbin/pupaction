#!/usr/bin/env python
# -*- Mode: Python; tab-width: 2; indent-tabs-mode: nil -*-

import mwtf
import mwtfpuppet
import sys
import os.path
from optparse import OptionParser

def main():
  basenm = os.path.basename(sys.argv[0])
  if basenm == 'puptrigger':
    daction = 'trigger'
  else:
    daction = 'status'

  mwtf.requires_super_user('Script %s' % basenm)

  usage = """usage: %prog [options]

  where valid actions are trigger, status (default status)

  """
  parser = OptionParser(usage)
  parser.add_option("-a", "--action", action="store", dest="action", default=daction, help='specify action')
  parser.add_option("-d", "--debug", action="count", dest="debug", default=0, help='increment debug level')
  parser.add_option("-f", "--force", action="store_true", dest="force", help='specifies force mode')
  parser.add_option("-t", "--test", action="store_true", dest="test", default=False, help='specify test mode')
  parser.add_option("-v", "--verbose", action="count", dest="verbose", default=0, help='increment verbosity level')
  parser.add_option("-V", "--version", action="store_true", dest="version", default=False, help='show version and exit')

  (opts, args) = parser.parse_args()

  options = vars(opts)
  if options['debug']>1:
    print (options)
    print (args)

  if options['version']:
    print('%s Version: 1.0.0' % basenm)
    exit(0)

  gettrace = getattr(sys, 'gettrace', None)
  
  if gettrace is not None and gettrace():
      print('Hmm, Big Debugger is watching me')
      options['action'] = 'trigger'

  mwtf.requires_super_user()
  options['caller'] = 'pup' + options['action']
  if options['action'] == 'status':
    actor = mwtfpuppet.PuppetStatus(options)
    exit_code = actor.check()
  elif options['action'] == 'trigger':
    actor = mwtfpuppet.PuppetTrigger(options)
    exit_code = actor.trigger()
  else:
    print('Unsupported action: %s' % options['action'])
    exit_code = 1

  exit(exit_code)

if __name__ == "__main__":
    main()
